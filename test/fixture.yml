tosca_definitions_version: tosca_simple_yaml_1_3

data_types: {}

node_types:

  sodalite.nodes.DockerNetwork:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      component_version:
        description: Domain-specific software component version.
        required: false
        type: version
      name:
        description: The name of the network
        required: true
        type: string
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        type: tosca.datatypes.Credential
        required: false
    attributes:
      state:
        description: The state of the node instance.
        type: string
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
    requirements:
      dependency:
        specification: '[ 0, UNBOUNDED ]'
      host:
        capability: tosca.capabilities.Compute
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
    capabilities:
      network:
        type: tosca.capabilities.Network
        valid_source_types:
        - sodalite.nodes.DockerizedComponent
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        operations:
          delete:
            inputs:
              docker_network_name: '{default: {get_property: [SELF, name] } }'
            implementation:
              primary: playbooks/ddce9b4f-7eef-46b9-b3d6-80f58eb5bb84_remove_network.yml
          create:
            implementation:
              primary: playbooks/3b95de8b-4815-4f00-9ee4-cedf49df4afb_add_network.yml
            inputs:
              docker_network_name: '{default: {get_property: [SELF, name] } }'
        type: tosca.interfaces.node.lifecycle.Standard

  sodalite.nodes.DockerizedComponent:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      ports:
        description: Port binding for the docker container "exposed:internal" like
          "8081:8080"
        required: false
        type: list
        default: []
      component_version:
        description: Domain-specific software component version.
        type: version
        required: false
      image_name:
        description: The name of the image on the host
        type: string
        required: true
      hostname:
        description: The container's hostname
        required: false
        type: string
      volumes:
        description: A list of mounted volumes for the docker container "host_path:container_path"
          like "/tmp/docker:/tmp"
        required: false
        type: list
        default: []
      docker_network_name:
        description: Alias name for docker container
        default: ''
        required: false
        type: string
      restart_policy:
        description: Restart policy [no, on-failure, always, unless-stopped]
        required: false
        default: always
        type: string
      registry_url:
        description: The URL of the registry containing images
        required: true
        type: string
      alias:
        description: Alias name for docker container
        type: string
        required: true
      exposed_ports:
        description: Exposed ports of the container like "8081"
        required: false
        default: []
        type: string
      sleep:
        description: Sleep after image is deployed
        type: integer
        required: false
        default: 0
      env:
        description: Map for docker enviroment variables key-value dictionary
        default: '{}'
        required: false
        type: map
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        required: false
        type: tosca.datatypes.Credential
      command:
        description: Commands list for starting the container
        default: ''
        type: list
        required: false
    attributes:
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      state:
        description: The state of the node instance.
        type: string
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
    requirements:
      dependency:
        specification: '[ 0, UNBOUNDED ]'
      host:
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.Compute
        capability: tosca.capabilities.Compute
      network:
        relationship: tosca.relationships.DependsOn
        node: sodalite.nodes.DockerNetwork
        capability: tosca.capabilities.Network
      registry:
        node: sodalite.nodes.DockerRegistry
        capability: tosca.capabilities.Node
        relationship: tosca.relationships.DependsOn
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        operations:
          delete:
            inputs:
              alias: '{default: {get_property: [SELF, alias] } }'
            implementation:
              primary: playbooks/b8812f8a-7e1d-4acb-9258-45a5bdb45af2_remove_container.yml
          create:
            inputs:
              command: '{default: {get_property: [SELF, command] } }'
              image_name: '{default: {get_property: [SELF, image_name] } }'
              sleep: '{default: {get_property: [SELF, sleep] } }'
              exposed_ports: '{default: {get_property: [SELF, exposed_ports] } }'
              volumes: '{default: {get_property: [SELF, volumes] } }'
              docker_network_name: '{default: {get_property: [SELF, docker_network_name]
                } }'
              alias: '{default: {get_property: [SELF, alias] } }'
              public_address: '{default: {get_attribute: [SELF, public_address] }
                }'
              ports: '{default: {get_property: [SELF, ports] } }'
              env: '{default: {get_property: [SELF, env] } }'
              registry_url: '{default: {get_property: [SELF, docker_registry_url]
                } }'
              restart_policy: '{default: {get_property: [SELF, restart_policy] } }'
            implementation:
              primary: playbooks/454ab4e5-43f2-479a-b31a-619596e0a696_add_container.yml
        type: tosca.interfaces.node.lifecycle.Standard

  sodalite.nodes.RegistryCertificate:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        required: false
        type: tosca.datatypes.Credential
      component_version:
        description: Domain-specific software component version.
        type: version
        required: false
      organization_name:
        description: The organizationName field of the certificate signing request
          subject.
        type: string
        required: true
      registry_ip:
        description: IP of the SODALITE docker registry
        required: true
        type: string
        default: localhost
      country_name:
        description: Country name field of the certificate signing request subject.
        type: string
        required: true
      email_address:
        description: The email address field of the certificate signing request subject.
        type: string
        required: true
    attributes:
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      state:
        description: The state of the node instance.
        type: string
    requirements:
      host:
        node: tosca.nodes.Compute
        capability: tosca.capabilities.Compute
        relationship: tosca.relationships.HostedOn
      dependency:
        specification: '[ 0, UNBOUNDED ]'
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            implementation:
              primary: playbooks/d1e603eb-1261-4d73-90b9-683d3fd7d301_add_cert.yml
              dependencies:
                relative_path: artifacts
                files:
                - path: /home/yosu/Projects/Sodalite/Git/ide/dsl/org.sodalite.dsl.examples/certificates/docker/ca.key
                  url: http://160.40.52.200:8084/Ansibles/fde69a72-7375-4fef-adc7-e941cb985eec
                - url: http://160.40.52.200:8084/Ansibles/d6f34eaa-25cf-40fb-a31a-da244c0c9d37
                  path: /home/yosu/Projects/Sodalite/Git/ide/dsl/org.sodalite.dsl.examples/certificates/docker/ca.crt
            inputs:
              public_ipv4_address: '{default: {get_attribute: [SELF, public_address]
                } }'
              registry_ip: '{default: {get_property: [SELF, registry_ip] } }'
              country_name: '{default: {get_property: [SELF, country_name] } }'
              email_address: '{default: {get_property: [SELF, email_address] } }'
              organization_name: '{default: {get_property: [SELF, organization_name]
                } }'
          delete:
            inputs:
              registry_ip: '{default: {get_property: [SELF, registry_ip] } }'
            implementation:
              primary: playbooks/0ed0c21b-5614-48cf-82bc-cf7db4369f5b_remove_cert.yml

  sodalite.nodes.DockerVolume:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        type: tosca.datatypes.Credential
        required: false
      name:
        description: The name of the volume
        required: true
        type: string
      component_version:
        description: Domain-specific software component version.
        required: false
        type: version
    attributes:
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      state:
        description: The state of the node instance.
        type: string
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
    requirements:
      host:
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
        capability: tosca.capabilities.Compute
      dependency:
        specification: '[ 0, UNBOUNDED ]'
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          delete:
            inputs:
              volume_name: '{default: {get_property: [SELF, name] } }'
            implementation:
              primary: playbooks/85767023-d35f-49bc-90c0-e79fe21351eb_remove_volume.yml
          create:
            inputs:
              volume_name: '{default: {get_property: [SELF, name] } }'
            implementation:
              primary: playbooks/2a1e0e73-bcb8-4e6c-9c0d-0580cc5495b5_add_volume.yml

  sodalite.nodes.DockerHost:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        required: false
        type: tosca.datatypes.Credential
      component_version:
        description: Domain-specific software component version.
        type: version
        required: false
    attributes:
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      state:
        description: The state of the node instance.
        type: string
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      public_address:
        description: Host's IP
        type: string
    requirements:
      host:
        capability: tosca.capabilities.Compute
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
      dependency:
        specification: '[ 0, UNBOUNDED ]'
    capabilities:
      feature:
        type: tosca.capabilities.Node
      host:
        valid_source_types:
        - sodalite.nodes.DockerizedComponent
        type: tosca.capabilities.Compute
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              host_public_address: '{default: {get_attribute: [SELF, public_address]
                } }'
            implementation:
              primary: playbooks/85578876-343f-4e5b-ba1e-b1abfab8f6d3_create_docker_host.yml
          delete:
            implementation:
              primary: playbooks/4250caa5-0a7d-42c1-98ae-92bb3d0dc82f_delete_docker_host.yml

  sodalite.nodes.OpenStack.SecurityRules:
    derived_from: tosca.nodes.Root
    properties:
      group_description:
        description: Description of the security group in openstack
        required: true
        type: string
      group_name:
        description: Name of the security group in openstack.
        required: true
        type: string
      ports:
        type: map
        constraints:
          min_length: 1
        required: false
        entry_schema:
          type: 'org.sodalite.dsl.rM.impl.EPREFIX_TYPEImpl@49147941 (type: sodalite.datatypes.OpenStack.SecurityRule)
            (module: openstack)'
    attributes:
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      state:
        description: The state of the node instance.
        type: string
    requirements:
      dependency:
        specification: '[ 0, UNBOUNDED ]'
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          delete:
            implementation:
              primary: playbooks/67830dce-dabd-447f-81ab-9d2b57615331_security_rule_delete.yml
              dependencies:
                files:
                - path: /home/yosu/Projects/Sodalite/Git/iac-management/use-cases/modules/openstack/playbooks/egi_refresh_token.yml
                  url: http://160.40.52.200:8084/Ansibles/b8ad4903-01db-4433-8eaa-cbff67edee9b
            inputs:
              group_name: '{default: {get_property: [SELF, group_name] } }'
          create:
            implementation:
              primary: playbooks/55f5be63-2220-4e62-9b6d-c15b69f82e9e_security_rule_create.yml
              dependencies:
                files:
                - path: /home/yosu/Projects/Sodalite/Git/iac-management/use-cases/modules/openstack/playbooks/egi_refresh_token.yml
                  url: http://160.40.52.200:8084/Ansibles/4ba88e9d-2f5a-43b7-b658-3ff59fe5c3cc
            inputs:
              group_name: '{default: {get_property: [SELF, group_name] } }'
              group_description: '{default: {get_property: [SELF, group_description]
                } }'
              ports: '{default: {get_property: [SELF, ports] } }'

  sodalite.nodes.OpenStack.VM:
    derived_from: tosca.nodes.Compute
    properties:
      key_name:
        description: OpenStack SSH key name that should be placed on the VM
        required: false
        type: string
      floating_ip_pools:
        description: Name of floating IP pool from which to choose a floating IP
        default: ''
        type: string
        required: false
      userdata:
        description: Additional userdata applied to configure the VM
        type: string
        required: false
        default: ''
      flavor:
        description: OpenStack flavor id (flavor names are not accepted)
        type: string
        required: false
      name:
        description: Name that should be given to the VM in OpenStack
        type: string
        required: false
      image:
        description: OpenStack image id (image names are not accepted)
        required: false
        type: string
      username:
        description: Username for SSH connection
        required: false
        type: string
      timeout:
        description: Timeout to instantiate the VM
        required: false
        type: integer
        default: 600
      security_groups:
        description: OpenStack names of the security groups to which the instance
          should be added.Comma separated string.
        required: false
        type: string
      include_exporter:
        description: Flag to include exporter
        type: boolean
        default: true
        required: false
      network:
        description: OpenStack network id (network names are not accepted)
        required: false
        type: string
    attributes:
      ports:
        description: The list of logical ports assigned to the compute host instance
          and information about them.
        entry_schema:
          type: tosca.datatypes.network.PortInfo
        type: map
      entry_schema:
        type: tosca.datatypes.network.NetworkInfo
      networks:
        description: The list of logical networks assigned to the compute host instance
          and information about them.
        type: map
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      public_address:
        description: The primary public IP address assigned by the cloud provider
          that applications may use to access the Compute node.
        type: string
      id:
        description: OpenStack id of the VM
        type: string
      state:
        description: The state of the node instance.
        type: string
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      ansible_ip:
        description: ansible ipv4
        type: string
      private_address:
        description: The primary private IP address assigned by the cloud provider
          that applications may use to access the Compute node.
        type: string
    requirements:
      local_storage:
        specification: '[ 0, UNBOUNDED ]'
      dependency:
        specification: '[ 0, UNBOUNDED ]'
      protected_by:
        node: sodalite.nodes.OpenStack.SecurityRules
        relationship: tosca.relationships.DependsOn
        capability: tosca.capabilities.Node
    capabilities:
      binding:
        type: tosca.capabilities.network.Bindable
      feature:
        valid_source_types: {}
        type: tosca.capabilities.Node
      endpoint:
        type: tosca.capabilities.Endpoint.Admin
      host:
        type: tosca.capabilities.Compute
        valid_source_types:
        - tosca.nodes.SoftwareComponent
      scalable:
        type: tosca.capabilities.Scalable
      os:
        type: tosca.capabilities.OperatingSystem
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              security_groups: '{default: {get_property: [SELF, security_groups] }
                }'
              ansible_user: '{default: {get_property: [SELF, username] } }'
              network: '{default: {get_property: [SELF, network] } }'
              flavor: '{default: {get_property: [SELF, flavor] } }'
              timeout: '{default: {get_property: [SELF, timeout] } }'
              vm_name: '{default: {get_property: [SELF, name] } }'
              userdata: '{default: {get_property: [SELF, userdata] } }'
              key_name: '{default: {get_property: [SELF, key_name] } }'
              image: '{default: {get_property: [SELF, image] } }'
              floating_ip_pools: '{default: {get_property: [SELF, floating_ip_pools]
                } }'
              include_exporter: '{default: {get_property: [SELF, include_exporter]
                } }'
            implementation:
              dependencies:
                files:
                - path: /home/yosu/Projects/Sodalite/Git/iac-management/use-cases/modules/openstack/playbooks/egi_refresh_token.yml
                  url: http://160.40.52.200:8084/Ansibles/c91b757e-2cb5-4596-b80f-bdbea6fb4ccd
              primary: playbooks/88943b50-fdd9-4d5e-b72a-5fca96baaf27_vm_create.yml
          delete:
            inputs:
              id: '{default: {get_attribute: [SELF, id] } }'
            implementation:
              dependencies:
                files:
                - path: /home/yosu/Projects/Sodalite/Git/iac-management/use-cases/modules/openstack/playbooks/egi_refresh_token.yml
                  url: http://160.40.52.200:8084/Ansibles/30c3abbe-7718-433e-bf3b-dab3093d690d
              primary: playbooks/31f26aa0-cb6a-446c-b6c2-9c5e846b10e4_vm_delete.yml

  sodalite.nodes.ConfigurationDemo:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      mysql_db_pass:
        description: MYSQL database password
        required: true
        type: string
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        type: tosca.datatypes.Credential
        required: false
      component_version:
        description: Domain-specific software component version.
        type: version
        required: false
    attributes:
      state:
        description: The state of the node instance.
        type: string
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
    requirements:
      remote_server:
        capability: tosca.capabilities.Compute
        relationship: tosca.relationships.DependsOn
        node: sodalite.nodes.OpenStack.VM
      host:
        capability: tosca.capabilities.Compute
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.Compute
      dependency:
        specification: '[ 0, UNBOUNDED ]'
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        operations:
          create:
            implementation:
              dependencies:
                files:
                - url: http://160.40.52.200:8084/Ansibles/2dd0cacf-014c-4c08-a211-d222e41d3c21
                  path: /home/yosu/Projects/Sodalite/Git/iac-management/use-cases/snow-uc/snow-demo/playbooks/config.json.tmpl
              primary: playbooks/0fc36efb-5153-49d5-9074-ed7fc66b88a4_configure_demo.yml
            inputs:
              mysql_db_pass: '{default: {get_property: [SELF, mysql_db_pass] } }'
              remote_server: '{default: {get_attribute: [SELF, public_address] } }'
        type: tosca.interfaces.node.lifecycle.Standard

  sodalite.nodes.DockerRegistry:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      admin_credential:
        description: The optional credential that can be used to authenticate to the
          software component.
        required: false
        type: tosca.datatypes.Credential
      docker_registry_url:
        description: Docker Hub login
        type: string
        required: false
      component_version:
        description: Domain-specific software component version.
        required: false
        type: version
      docker_user:
        description: Docker Hub login
        default: ''
        required: false
        type: string
      docker_pass:
        description: Docker Hub password
        required: false
        default: ''
        type: string
    attributes:
      tosca_name:
        description: Reflects the name of the Node Template as defined in the TOSCA
          service template. This name is not unique to the realized instance model
          of corresponding deployed application as each template in the model can
          result in one or more instances (e.g., scaled) when orchestrated to a provider
          environment.
        type: string
      tosca_id:
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type
        type: string
      state:
        description: The state of the node instance.
        type: string
    requirements:
      dependency:
        specification: '[ 0, UNBOUNDED ]'
      host:
        relationship: tosca.relationships.HostedOn
        capability: tosca.capabilities.Compute
        node: tosca.nodes.Compute
    capabilities:
      feature:
        type: tosca.capabilities.Node
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            implementation:
              primary: playbooks/7d35630c-fd17-45d6-9ccd-3c373ee0ee91_login_user.yml
            inputs:
              docker_registry_url: '{default: {get_property: [SELF, docker_registry_url]
                } }'
              docker_user: '{default: {get_property: [SELF, docker_user] } }'
              docker_pass: '{default: {get_property: [SELF, docker_pass] } }'
          delete:
            inputs:
              docker_registry_url: '{default: {get_property: [SELF, docker_registry_url]
                } }'
            implementation:
              primary: playbooks/15dbb35b-d70f-4458-a7c2-47fd39240fee_logout_user.yml

topology_template:

  node_templates:
    snow-docker-network:
      type: sodalite.nodes.DockerNetwork
      properties:
        name: '{ get_input: docker-network }'
      requirements:
        host: snow-vm
        dependency: snow-docker-host
    snow-weather-condition-filter:
      type: sodalite.nodes.DockerizedComponent
      properties:
        command:
        - '{{ ansible_date_time.date }}'
        - 34 40 50 62 608 666 822 852 943 1307 6666
        docker_network_name:
          get_property:
            req_cap:
            - network
            property: name
            entity: SELF
        image_name: snow-weather-condition-filter:latest
        volumes:
        - snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots
        - snow_volume_shots:/SnowWatch-SODALITE/data/shots
        - /tmp/conf/config.json:/SnowWatch-SODALITE/config.json
        registry_url: '{ get_input: docker-registry-url }'
        alias: snow-weather-condition-filter
        restart_policy: always
      requirements:
        dependency: snow-docker-volume-shots
        network: snow-docker-network
        registry: snow-docker-registry
        host: snow-docker-host
    snow-demo:
      type: sodalite.nodes.DockerizedComponent
      properties:
        restart_policy: always
        registry_url: '{ get_input: docker-registry-url }'
        command: '{{ ansible_date_time.date }}'
        image_name: snow-demo:latest
        volumes:
        - snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots
        - /tmp/conf/config.json:/SnowWatch-SODALITE/config.json
        - snow_volume_demo_output:/SnowWatch-SODALITE/data/output
        alias: snow-demo
        docker_network_name:
          get_property:
            req_cap:
            - network
            entity: SELF
            property: name
      requirements:
        dependency: snow-docker-volume-daily-shots
        registry: snow-docker-registry
        network: snow-docker-network
        host: snow-docker-host
    snow-docker-registry-certificate-2:
      type: sodalite.nodes.RegistryCertificate
      properties:
        registry_ip: '{ get_input: docker-registry-url }'
        country_name: '{ get_input: docker-registry-cert-country-name }'
        email_address: '{ get_input: docker-registry-cert-email-address }'
        organization_name: '{ get_input: docker-registry-cert-organization-name }'
      requirements:
        dependency: snow-docker-host-2
        host: snow-vm-2
    snow-docker-volume-demo-output:
      type: sodalite.nodes.DockerVolume
      properties:
        name: snow_volume_demo_output
      requirements:
        host: snow-vm
        dependency: snow-docker-host
    snow-docker-host:
      type: sodalite.nodes.DockerHost
      requirements:
        host: snow-vm
    snow-security-rules:
      type: sodalite.nodes.OpenStack.SecurityRules
      properties:
        group_description: Snow UC security group
        group_name: snow
        ports:
          http_port:
            remote_ip_prefix: 0.0.0.0/0
            port_range_min: 80
            protocol: tcp
            port_range_max: 80
          component_ports:
            port_range_min: 8080
            protocol: tcp
            remote_ip_prefix: 0.0.0.0/0
            port_range_max: 8081
    snow-daily-median-aggregator:
      type: sodalite.nodes.DockerizedComponent
      properties:
        volumes:
        - snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots
        - snow_volume_shots:/SnowWatch-SODALITE/data/shots
        - /tmp/conf/config.json:/SnowWatch-SODALITE/config.json
        registry_url: '{ get_input: docker-registry-url }'
        image_name: snow-daily-median-aggregator:latest
        restart_policy: always
        docker_network_name:
          get_property:
            property: name
            req_cap:
            - network
            entity: SELF
        alias: snow-daily-median-aggregator
        command:
        - '{{ ansible_date_time.date }}'
        - 34 40 50 62 608 666 822 852 943 1307 6666
      requirements:
        network: snow-docker-network
        host: snow-docker-host
        dependency: snow-configuration-demo
        registry: snow-docker-registry
    snow-demo-nginx:
      type: sodalite.nodes.DockerizedComponent
      properties:
        ports:
        - 80:80
        volumes:
        - snow_volume_demo_output:/usr/share/nginx/html
        registry_url: '{ get_input: docker-registry-url }'
        restart_policy: always
        exposed_ports:
        - '80'
        alias: snow-nginx
        image_name: nginx:latest
      requirements:
        dependency: snow-docker-volume-demo-output
        host: snow-docker-host
        registry: snow-docker-registry
    snow-vm-2:
      type: sodalite.nodes.OpenStack.VM
      properties:
        network: '{ get_input: openstack-network-name }'
        image: '{ get_input: image-name }'
        name: snow-vm_am_9
        flavor: '{ get_input: flavor-name }'
        security_groups: '{ get_input: security-groups }'
        username: centos
        key_name: '{ get_input: ssh-key-name }'
      requirements:
        protected_by: snow-security-rules
    snow-docker-volume-masks:
      type: sodalite.nodes.DockerVolume
      properties:
        name: snow_volume_masks
      requirements:
        host: snow-vm
        dependency: snow-docker-host
    snow-configuration-demo:
      type: sodalite.nodes.ConfigurationDemo
      properties:
        mysql_db_pass: '{ get_input: mysql-db-pass }'
      requirements:
        host: snow-vm
        remote_server: snow-vm-2
    snow-skyline-extractor:
      type: sodalite.nodes.DockerizedComponent
      properties:
        image_name: snow-skyline-extractor:latest
        exposed_ports:
        - '8080'
        volumes:
        - /tmp/docker:/tmp
        ports:
        - 8080:8080
        alias: snow-skyline-extractor
        registry_url: '{ get_input: docker-registry-url }'
      requirements:
        registry: snow-docker-registry
        host: snow-docker-host-2
    snow-docker-volume-shots:
      type: sodalite.nodes.DockerVolume
      properties:
        name: snow_volume_shots
      requirements:
        dependency: snow-docker-host
        host: snow-vm
    snow-webcam-crawler:
      type: sodalite.nodes.DockerizedComponent
      properties:
        registry_url: '{ get_input: docker-registry-url }'
        docker_network_name:
          get_property:
            req_cap:
            - network
            entity: SELF
            property: name
        command: 34,40,50,62,608,666,822,852,943,1307,6666
        volumes:
        - /tmp/conf/config.json:/SnowWatch-SODALITE/WebCamCrawler/config.json
        - snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots
        - snow_volume_shots:/SnowWatch-SODALITE/data/shots
        alias: snow-webcam-crawler
        image_name: snow-webcam-crawler:latest
      requirements:
        dependency: snow-docker-volume-shots
        registry: snow-docker-registry
        network: snow-docker-network
        host: snow-docker-host
    snow-webcam-mockup:
      type: sodalite.nodes.DockerizedComponent
      properties:
        exposed_ports:
        - '8080'
        docker_network_name:
          get_property:
            property: name
            entity: SELF
            req_cap:
            - network
        alias: snow-webcam-mockup
        image_name: snow-webcam-mockup:latest
        ports:
        - 8080:8080
        registry_url: '{ get_input: docker-registry-url }'
      requirements:
        network: snow-docker-network
        registry: snow-docker-registry
        host: snow-docker-host
    snow-docker-volume-daily-shots:
      type: sodalite.nodes.DockerVolume
      properties:
        name: snow_volume_daily_shots
      requirements:
        host: snow-vm
        dependency: snow-docker-host
    snow-docker-host-2:
      type: sodalite.nodes.DockerHost
      requirements:
        host: snow-vm-2
    snow-skyline-alignment:
      type: sodalite.nodes.DockerizedComponent
      properties:
        exposed_ports:
        - '8080'
        alias: snow-skyline-alignment
        volumes:
        - /tmp/docker:/tmp
        registry_url: '{ get_input: docker-registry-url }'
        image_name: snow-skyline-alignment:latest
        ports:
        - 80:8080
        - 8081:8080
      requirements:
        host: snow-docker-host-2
        registry: snow-docker-registry
    snow-vm:
      type: sodalite.nodes.OpenStack.VM
      properties:
        network: '{ get_input: openstack-network-name }'
        image: '{ get_input: image-name }'
        username: centos
        security_groups: '{ get_input: security-groups }'
        name: snow-vm_am_1
        flavor: '{ get_input: flavor-name }'
        key_name: '{ get_input: ssh-key-name }'
      requirements:
        protected_by: snow-security-rules
    snow-mysql:
      type: sodalite.nodes.DockerizedComponent
      properties:
        env: '{ get_input: mysql-env }'
        ports:
        - 3306:3306
        registry_url: '{ get_input: docker-registry-url }'
        docker_network_name:
          get_property:
            entity: SELF
            property: name
            req_cap:
            - network
        image_name: snow-mysql:latest
        alias: mysql
        exposed_ports:
        - '3306'
        command: --default-authentication-plugin=mysql_native_password
      requirements:
        network: snow-docker-network
        host: snow-docker-host
        registry: snow-docker-registry
    snow-docker-registry-certificate:
      type: sodalite.nodes.RegistryCertificate
      properties:
        organization_name: '{ get_input: docker-registry-cert-organization-name }'
        registry_ip: '{ get_input: docker-registry-url }'
        email_address: '{ get_input: docker-registry-cert-email-address }'
        country_name: '{ get_input: docker-registry-cert-country-name }'
      requirements:
        dependency: snow-docker-host
        host: snow-vm
    snow-docker-registry:
      type: sodalite.nodes.DockerRegistry
      properties:
        docker_registry_url: '{ get_input: docker-registry-url }'
      requirements:
        dependency: snow-docker-registry-certificate
        host: snow-vm

