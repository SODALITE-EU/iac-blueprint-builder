tosca_definitions_version: tosca_simple_yaml_1_0 


data_types: 
 

  sodalite.nodes.OpenStack.SecurityRule:  
    derived_from: tosca.datatypes.Root 
    properties:  
      port_range_max:  
        required: True 
        type: tosca.datatypes.network.PortDef 
      port_range_min:  
        type: tosca.datatypes.network.PortDef 
        required: True 
      remote_ip_prefix:  
        required: True 
        type: string 
        default: 0.0.0.0/0 
      protocol:  
        constraints:  
          valid_values: ['tcp', 'udp', 'icmp'] 
        default: tcp 
        type: string 
        required: True 



node_types: 
 

  sodalite.nodes.DockerizedComponent:  
    derived_from: tosca.nodes.SoftwareComponent 
    properties:  
      alias:  
        description: Alias name for docker container 
        type: string 
        required: False 
      image_name:  
        description: The name of the image on the host 
        required: True 
        type: string 
      admin_credential:  
        description: The optional credential that can be used to authenticate to the software component. 
        type: tosca.datatypes.Credential 
        required: False 
      ports:  
        description: Port binding for the docker container "exposed:internal" like "8081:8080" 
        default: [] 
        type: string 
        required: True 
      exposed_ports:  
        description: Exposed ports of the container like "8081" 
        type: string 
        required: True 
        default: [] 
      volumes:  
        description: A list of mounted volumes for the docker container "host_path:container_path" like "/tmp/docker:/tmp" 
        type: list 
        default: [] 
        required: False 
      component_version:  
        description: Domain-specific software component version. 
        type: version 
        required: False 
      pull:  
        description: If true, always pull the latest version of an image. Otherwise, will only pull an image when missing. 
        required: False 
        type: string 
        default: no 
      env:  
        description: Map for docker enviroment variables key-value dictionary 
        type: map 
        default:  
        required: False 
      restart_policy:  
        description: Restart policy [no, on-failure, always, unless-stopped] 
        default: no 
        type: string 
        required: False 
      command:  
        description: Commands list for starting the container 
        default: [] 
        required: False 
        type: list 
    attributes:  
      tosca_id:  
        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type 
        type: string 
      tosca_name:  
        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. 
        type: string 
      state:  
        description: The state of the node instance. 
        type: string 
    requirements:  
      - dependency:  
          node: tosca.nodes.Root 
          occurrences:  
            min: 0 
            max: UNBOUNDED 
          relationship: tosca.relationships.DependsOn 
          capability: tosca.capabilities.Node 
      - host:  
          relationship: tosca.relationships.HostedOn 
          capability: tosca.capabilities.Node 
          node: sodalite.nodes.DockerHost 
    capabilities:  
      feature:  
        type: tosca.capabilities.Node 
    interfaces:  
      Standard:  
        create:  
          implementation:  
            primary: playbooks/docker/dockerized_component_deploy.yml 
          inputs:  
            pull: { default: { get_property: [ SELF, pull ] } } 
            exposed_ports: { default: { get_property: [ SELF, exposed_ports ] } } 
            alias: { default: { get_property: [ SELF, alias ] } } 
            image_name: { default: { get_property: [ SELF, image_name ] } } 
            volumes: { default: { get_property: [ SELF, volumes ] } } 
            ansible_ip: { default: { get_attribute: [ SELF, host, ansible_ip ] } } 
            restart_policy: { default: { get_property: [ SELF, restart_policy ] } } 
            ports: { default: { get_property: [ SELF, ports ] } } 
            registry_ip: { default: { get_attribute: [ SELF, host, registry_ip ] } } 
            env: { default: { get_property: [ SELF, env ] } } 
            command: { default: { get_property: [ SELF, command ] } } 
        delete:  
          implementation:  
            primary: playbooks/docker/dockerized_component_undeploy.yml 
          inputs:  
            alias: { default: { get_property: [ SELF, alias ] } } 
        type: tosca.interfaces.node.lifecycle.Standard 

  sodalite.nodes.DockerHost:  
    derived_from: tosca.nodes.SoftwareComponent 
    properties:  
      registry_ip:  
        description: IP of the SODALITE docker registry 
        required: True 
        default: localhost 
        type: string 
      admin_credential:  
        description: The optional credential that can be used to authenticate to the software component. 
        required: False 
        type: tosca.datatypes.Credential 
      component_version:  
        description: Domain-specific software component version. 
        required: False 
        type: version 
    attributes:  
      tosca_id:  
        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type 
        type: string 
      state:  
        description: The state of the node instance. 
        type: string 
      tosca_name:  
        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. 
        type: string 
      registry_ip:  
        description: IP of the SODALITE docker registry 
        type: string 
    requirements:  
      - host:  
          node: tosca.nodes.Compute 
          relationship: tosca.relationships.HostedOn 
          capability: tosca.capabilities.Compute 
      - dependency:  
          capability: tosca.capabilities.Node 
          node: tosca.nodes.Root 
          relationship: tosca.relationships.DependsOn 
          occurrences:  
            max: UNBOUNDED 
            min: 0 
    capabilities:  
      feature:  
        type: tosca.capabilities.Node 
      host:  
        valid_source_types: ['sodalite.nodes.DockerizedComponent'] 
        type: tosca.capabilities.Node 
    interfaces:  
      Standard:  
        delete:  
          implementation:  
            primary: playbooks/docker/destroy_docker_host.yml 
          inputs:  
            registry_ip: { default: { get_property: [ SELF, registry_ip ] } } 
        create:  
          implementation:  
            primary: playbooks/docker/create_docker_host.yml 
          inputs:  
            public_ipv4_address: { default:  { get_attribute: [ SELF, host, public_address ] } } 
            registry_ip: { default: { get_property: [ SELF, registry_ip ] } } 
        type: tosca.interfaces.node.lifecycle.Standard 

  sodalite.nodes.OpenStack.VM:  
    derived_from: tosca.nodes.Compute 
    properties:  
      flavor:  
        description: OpenStack flavor id (flavor names are not accepted) 
        type: string 
      name:  
        description: Name that should be given to the VM in OpenStack 
        type: string 
      security_groups:  
        description: OpenStack names of the security groups to which the instance should be added.Comma separated string. 
        type: string 
      network:  
        description: OpenStack network id (network names are not accepted) 
        type: string 
      key_name:  
        description: OpenStack SSH key name that should be placed on the VM 
        type: string 
      image:  
        description: OpenStack image id (image names are not accepted) 
        type: string 
    attributes:  
      networks:  
        description: The list of logical networks assigned to the compute host instance and information about them. 
        type: map 
      id:  
        description: OpenStack id of the VM 
        type: string 
      private_address:  
        description: Private ipv4 
        type: string 
      ports:  
        description: The list of logical ports assigned to the compute host instance and information about them. 
        type: map 
        entry_schema:  
          type: tosca.datatypes.network.PortInfo 
      ansible_ip:  
        description: ansible ipv4 
        type: string 
      private_address:  
        description: The primary private IP address assigned by the cloud provider that applications may use to access the Compute node. 
        type: string 
      public_address:  
        description: The primary public IP address assigned by the cloud provider that applications may use to access the Compute node. 
        type: string 
      public_address:  
        description: Public ipv4 
        type: string 
      state:  
        description: The state of the node instance. 
        type: string 
      entry_schema:  
        type: tosca.datatypes.network.NetworkInfo 
      tosca_id:  
        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type 
        type: string 
      tosca_name:  
        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. 
        type: string 
    requirements:  
      - dependency:  
          relationship: tosca.relationships.DependsOn 
          occurrences:  
            min: 0 
            max: UNBOUNDED 
          capability: tosca.capabilities.Node 
          node: tosca.nodes.Root 
      - local_storage:  
          node: tosca.nodes.Storage.BlockStorage 
          capability: tosca.capabilities.Attachment 
          occurrences:  
            max: UNBOUNDED 
            min: 0 
          relationship: tosca.relationships.AttachesTo 
      - protected_by:  
          relationship: tosca.relationships.DependsOn 
          node: sodalite.nodes.OpenStack.SecurityRules 
          capability: tosca.capabilities.Node 
    capabilities:  
      scalable:  
        type: tosca.capabilities.Scalable 
      binding:  
        type: tosca.capabilities.network.Bindable 
      host:  
        type: tosca.capabilities.Compute 
        valid_source_types: ['tosca.nodes.SoftwareComponent'] 
      endpoint:  
        type: tosca.capabilities.Endpoint.Admin 
      feature:  
        type: tosca.capabilities.Node 
      os:  
        type: tosca.capabilities.OperatingSystem 
    interfaces:  
      Standard:  
        type: tosca.interfaces.node.lifecycle.Standard 
        delete:  
          implementation: playbooks/openstack/vm/delete.yml 
          inputs:  
            id: { default: { get_attribute: [ SELF, id ] } } 
        create:  
          inputs:  
            network: { default: { get_property: [ SELF, network  ] } } 
            vm_name: { default: { get_property: [ SELF, name     ] } } 
            flavor: { default: { get_property: [ SELF, flavor   ] } } 
            security_groups: { default: { get_property: [ SELF, security_groups  ] } } 
            key_name: { default: { get_property: [ SELF, key_name ] } } 
            image: { default: { get_property: [ SELF, image    ] } } 
          implementation: playbooks/openstack/vm/create.yml 

  sodalite.nodes.OpenStack.SecurityRules:  
    derived_from: tosca.nodes.Root 
    properties:  
      group_name:  
        description: Name of the security group in openstack. 
        required: True 
        type: string 
      group_description:  
        description: Description of the security group in openstack. 
        type: string 
        required: True 
      ports:  
        entry_schema:  
          type: sodalite.nodes.OpenStack.SecurityRule 
        constraints:  
          min_length: 1 
        required: False 
        type: map 
    attributes:  
      tosca_id:  
        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type 
        type: string 
      tosca_name:  
        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. 
        type: string 
      state:  
        description: The state of the node instance. 
        type: string 
    requirements:  
      - dependency:  
          relationship: tosca.relationships.DependsOn 
          node: tosca.nodes.Root 
          capability: tosca.capabilities.Node 
          occurrences:  
            min: 0 
            max: UNBOUNDED 
    capabilities:  
      feature:  
        type: tosca.capabilities.Node 
    interfaces:  
      Standard:  
        create:  
          inputs:  
            ports: { default: { get_property: [ SELF, ports  ] } } 
            group_name: { default: { get_property: [ SELF, group_name         ] } } 
            group_description: { default: { get_property: [ SELF, group_description  ] } } 
          implementation: playbooks/openstack/security-rule/create.yml 
        delete:  
          implementation: playbooks/openstack/security-rule/delete.yml 
          inputs:  
            group_name: { default: { get_property: [ SELF, group_name         ] } } 
        type: tosca.interfaces.node.lifecycle.Standard 



topology_template:

  inputs:  
    ssh-key-name:  
      type: string 
    docker-registry-ip:  
      type: string 


  node_templates: 

    skyline-extractor:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        exposed_ports:  ['8080'] 
        image_name:  snow-skyline-extractor 
        ports:  ['8080:8080'] 
        volumes:  /tmp/docker:/tmp 
      requirements:  
        - host:  snow-docker-host 

    snow-docker-host:  
      type: sodalite.nodes.DockerHost 
      properties:  
        registry_ip:  { get_input: docker-registry-ip } 
      requirements:  
        - host:  snow-vm 

    snow-vm:  
      type: sodalite.nodes.OpenStack.VM 
      properties:  
        security_groups:  default,snow 
        key_name:  { get_input: ssh-key-name } 
        network:  orchestrator-net 
        flavor:  m1.small 
        image:  centos7 
        name:  snow-vm1 
      requirements:  
        - protected_by:  security-rules-snow 

    skyline-alignment:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        exposed_ports:  ['8080'] 
        ports:  ['8081:8080', '80:8080'] 
        volumes:  /tmp/docker:/tmp 
        image_name:  snow-skyline-alignment 
      requirements:  
        - host:  snow-docker-host 

    security-rules-snow:  
      type: sodalite.nodes.OpenStack.SecurityRules 
      properties:  
        group_description:  Snow UC security group 
        ports:  
          http_port:  
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 80 
            protocol: tcp 
            port_range_max: 80 
          component_ports:  
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 8080 
            protocol: tcp 
            port_range_max: 8081 
        group_name:  snow 


