




{
  "blueprint_id": "snow",
  "tosca_definition": {
    "name": "service.yaml",
    "type": "file",
    "content": "tosca_definitions_version: tosca_simple_yaml_1_0 \n\n\ndata_types: \n \n\n  sodalite.nodes.OpenStack.SecurityRule:  \n    derived_from: tosca.datatypes.Root \n    properties:  \n      port_range_max:  \n        required: True \n        type: tosca.datatypes.network.PortDef \n      port_range_min:  \n        type: tosca.datatypes.network.PortDef \n        required: True \n      remote_ip_prefix:  \n        required: True \n        type: string \n        default: 0.0.0.0/0 \n      protocol:  \n        constraints:  \n          valid_values: ['tcp', 'udp', 'icmp'] \n        default: tcp \n        type: string \n        required: True \n\n\n\nnode_types: \n \n\n  sodalite.nodes.DockerizedComponent:  \n    derived_from: tosca.nodes.SoftwareComponent \n    properties:  \n      alias:  \n        description: Alias name for docker container \n        type: string \n        required: False \n      image_name:  \n        description: The name of the image on the host \n        required: True \n        type: string \n      admin_credential:  \n        description: The optional credential that can be used to authenticate to the software component. \n        type: tosca.datatypes.Credential \n        required: False \n      ports:  \n        description: Port binding for the docker container \"exposed:internal\" like \"8081:8080\" \n        default: [] \n        type: string \n        required: True \n      exposed_ports:  \n        description: Exposed ports of the container like \"8081\" \n        type: string \n        required: True \n        default: [] \n      volumes:  \n        description: A list of mounted volumes for the docker container \"host_path:container_path\" like \"/tmp/docker:/tmp\" \n        type: list \n        default: [] \n        required: False \n      component_version:  \n        description: Domain-specific software component version. \n        type: version \n        required: False \n      pull:  \n        description: If true, always pull the latest version of an image. Otherwise, will only pull an image when missing. \n        required: False \n        type: string \n        default: no \n      env:  \n        description: Map for docker enviroment variables key-value dictionary \n        type: map \n        default:  \n        required: False \n      restart_policy:  \n        description: Restart policy [no, on-failure, always, unless-stopped] \n        default: no \n        type: string \n        required: False \n      command:  \n        description: Commands list for starting the container \n        default: [] \n        required: False \n        type: list \n    attributes:  \n      tosca_id:  \n        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type \n        type: string \n      tosca_name:  \n        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. \n        type: string \n      state:  \n        description: The state of the node instance. \n        type: string \n    requirements:  \n      - dependency:  \n          node: tosca.nodes.Root \n          occurrences:  \n            min: 0 \n            max: UNBOUNDED \n          relationship: tosca.relationships.DependsOn \n          capability: tosca.capabilities.Node \n      - host:  \n          relationship: tosca.relationships.HostedOn \n          capability: tosca.capabilities.Node \n          node: sodalite.nodes.DockerHost \n    capabilities:  \n      feature:  \n        type: tosca.capabilities.Node \n    interfaces:  \n      Standard:  \n        create:  \n          implementation:  \n            primary: playbooks/docker/dockerized_component_deploy.yml \n          inputs:  \n            pull: { default: { get_property: [ SELF, pull ] } } \n            exposed_ports: { default: { get_property: [ SELF, exposed_ports ] } } \n            alias: { default: { get_property: [ SELF, alias ] } } \n            image_name: { default: { get_property: [ SELF, image_name ] } } \n            volumes: { default: { get_property: [ SELF, volumes ] } } \n            ansible_ip: { default: { get_attribute: [ SELF, host, ansible_ip ] } } \n            restart_policy: { default: { get_property: [ SELF, restart_policy ] } } \n            ports: { default: { get_property: [ SELF, ports ] } } \n            registry_ip: { default: { get_attribute: [ SELF, host, registry_ip ] } } \n            env: { default: { get_property: [ SELF, env ] } } \n            command: { default: { get_property: [ SELF, command ] } } \n        delete:  \n          implementation:  \n            primary: playbooks/docker/dockerized_component_undeploy.yml \n          inputs:  \n            alias: { default: { get_property: [ SELF, alias ] } } \n        type: tosca.interfaces.node.lifecycle.Standard \n\n  sodalite.nodes.DockerHost:  \n    derived_from: tosca.nodes.SoftwareComponent \n    properties:  \n      registry_ip:  \n        description: IP of the SODALITE docker registry \n        required: True \n        default: localhost \n        type: string \n      admin_credential:  \n        description: The optional credential that can be used to authenticate to the software component. \n        required: False \n        type: tosca.datatypes.Credential \n      component_version:  \n        description: Domain-specific software component version. \n        required: False \n        type: version \n    attributes:  \n      tosca_id:  \n        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type \n        type: string \n      state:  \n        description: The state of the node instance. \n        type: string \n      tosca_name:  \n        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. \n        type: string \n      registry_ip:  \n        description: IP of the SODALITE docker registry \n        type: string \n    requirements:  \n      - host:  \n          node: tosca.nodes.Compute \n          relationship: tosca.relationships.HostedOn \n          capability: tosca.capabilities.Compute \n      - dependency:  \n          capability: tosca.capabilities.Node \n          node: tosca.nodes.Root \n          relationship: tosca.relationships.DependsOn \n          occurrences:  \n            max: UNBOUNDED \n            min: 0 \n    capabilities:  \n      feature:  \n        type: tosca.capabilities.Node \n      host:  \n        valid_source_types: ['sodalite.nodes.DockerizedComponent'] \n        type: tosca.capabilities.Node \n    interfaces:  \n      Standard:  \n        delete:  \n          implementation:  \n            primary: playbooks/docker/destroy_docker_host.yml \n          inputs:  \n            registry_ip: { default: { get_property: [ SELF, registry_ip ] } } \n        create:  \n          implementation:  \n            primary: playbooks/docker/create_docker_host.yml \n          inputs:  \n            public_ipv4_address: { default:  { get_attribute: [ SELF, host, public_address ] } } \n            registry_ip: { default: { get_property: [ SELF, registry_ip ] } } \n        type: tosca.interfaces.node.lifecycle.Standard \n\n  sodalite.nodes.OpenStack.VM:  \n    derived_from: tosca.nodes.Compute \n    properties:  \n      flavor:  \n        description: OpenStack flavor id (flavor names are not accepted) \n        type: string \n      name:  \n        description: Name that should be given to the VM in OpenStack \n        type: string \n      security_groups:  \n        description: OpenStack names of the security groups to which the instance should be added.Comma separated string. \n        type: string \n      network:  \n        description: OpenStack network id (network names are not accepted) \n        type: string \n      key_name:  \n        description: OpenStack SSH key name that should be placed on the VM \n        type: string \n      image:  \n        description: OpenStack image id (image names are not accepted) \n        type: string \n    attributes:  \n      networks:  \n        description: The list of logical networks assigned to the compute host instance and information about them. \n        type: map \n      id:  \n        description: OpenStack id of the VM \n        type: string \n      private_address:  \n        description: Private ipv4 \n        type: string \n      ports:  \n        description: The list of logical ports assigned to the compute host instance and information about them. \n        type: map \n        entry_schema:  \n          type: tosca.datatypes.network.PortInfo \n      ansible_ip:  \n        description: ansible ipv4 \n        type: string \n      private_address:  \n        description: The primary private IP address assigned by the cloud provider that applications may use to access the Compute node. \n        type: string \n      public_address:  \n        description: The primary public IP address assigned by the cloud provider that applications may use to access the Compute node. \n        type: string \n      public_address:  \n        description: Public ipv4 \n        type: string \n      state:  \n        description: The state of the node instance. \n        type: string \n      entry_schema:  \n        type: tosca.datatypes.network.NetworkInfo \n      tosca_id:  \n        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type \n        type: string \n      tosca_name:  \n        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. \n        type: string \n    requirements:  \n      - dependency:  \n          relationship: tosca.relationships.DependsOn \n          occurrences:  \n            min: 0 \n            max: UNBOUNDED \n          capability: tosca.capabilities.Node \n          node: tosca.nodes.Root \n      - local_storage:  \n          node: tosca.nodes.Storage.BlockStorage \n          capability: tosca.capabilities.Attachment \n          occurrences:  \n            max: UNBOUNDED \n            min: 0 \n          relationship: tosca.relationships.AttachesTo \n      - protected_by:  \n          relationship: tosca.relationships.DependsOn \n          node: sodalite.nodes.OpenStack.SecurityRules \n          capability: tosca.capabilities.Node \n    capabilities:  \n      scalable:  \n        type: tosca.capabilities.Scalable \n      binding:  \n        type: tosca.capabilities.network.Bindable \n      host:  \n        type: tosca.capabilities.Compute \n        valid_source_types: ['tosca.nodes.SoftwareComponent'] \n      endpoint:  \n        type: tosca.capabilities.Endpoint.Admin \n      feature:  \n        type: tosca.capabilities.Node \n      os:  \n        type: tosca.capabilities.OperatingSystem \n    interfaces:  \n      Standard:  \n        type: tosca.interfaces.node.lifecycle.Standard \n        delete:  \n          implementation: playbooks/openstack/vm/delete.yml \n          inputs:  \n            id: { default: { get_attribute: [ SELF, id ] } } \n        create:  \n          inputs:  \n            network: { default: { get_property: [ SELF, network  ] } } \n            vm_name: { default: { get_property: [ SELF, name     ] } } \n            flavor: { default: { get_property: [ SELF, flavor   ] } } \n            security_groups: { default: { get_property: [ SELF, security_groups  ] } } \n            key_name: { default: { get_property: [ SELF, key_name ] } } \n            image: { default: { get_property: [ SELF, image    ] } } \n          implementation: playbooks/openstack/vm/create.yml \n\n  sodalite.nodes.OpenStack.SecurityRules:  \n    derived_from: tosca.nodes.Root \n    properties:  \n      group_name:  \n        description: Name of the security group in openstack. \n        required: True \n        type: string \n      group_description:  \n        description: Description of the security group in openstack. \n        type: string \n        required: True \n      ports:  \n        entry_schema:  \n          type: sodalite.nodes.OpenStack.SecurityRule \n        constraints:  \n          min_length: 1 \n        required: False \n        type: map \n    attributes:  \n      tosca_id:  \n        description: A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type \n        type: string \n      tosca_name:  \n        description: Reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment. \n        type: string \n      state:  \n        description: The state of the node instance. \n        type: string \n    requirements:  \n      - dependency:  \n          relationship: tosca.relationships.DependsOn \n          node: tosca.nodes.Root \n          capability: tosca.capabilities.Node \n          occurrences:  \n            min: 0 \n            max: UNBOUNDED \n    capabilities:  \n      feature:  \n        type: tosca.capabilities.Node \n    interfaces:  \n      Standard:  \n        create:  \n          inputs:  \n            ports: { default: { get_property: [ SELF, ports  ] } } \n            group_name: { default: { get_property: [ SELF, group_name         ] } } \n            group_description: { default: { get_property: [ SELF, group_description  ] } } \n          implementation: playbooks/openstack/security-rule/create.yml \n        delete:  \n          implementation: playbooks/openstack/security-rule/delete.yml \n          inputs:  \n            group_name: { default: { get_property: [ SELF, group_name         ] } } \n        type: tosca.interfaces.node.lifecycle.Standard \n\n\n\ntopology_template:\n\n  inputs:  \n    ssh-key-name:  \n      type: string \n    docker-registry-ip:  \n      type: string \n\n\n  node_templates: \n\n    skyline-extractor:  \n      type: sodalite.nodes.DockerizedComponent \n      properties:  \n        exposed_ports:  ['8080'] \n        image_name:  snow-skyline-extractor \n        ports:  ['8080:8080'] \n        volumes:  /tmp/docker:/tmp \n      requirements:  \n        - host:  snow-docker-host \n\n    snow-docker-host:  \n      type: sodalite.nodes.DockerHost \n      properties:  \n        registry_ip:  { get_input: docker-registry-ip } \n      requirements:  \n        - host:  snow-vm \n\n    snow-vm:  \n      type: sodalite.nodes.OpenStack.VM \n      properties:  \n        security_groups:  default,snow \n        key_name:  { get_input: ssh-key-name } \n        network:  orchestrator-net \n        flavor:  m1.small \n        image:  centos7 \n        name:  snow-vm1 \n      requirements:  \n        - protected_by:  security-rules-snow \n\n    skyline-alignment:  \n      type: sodalite.nodes.DockerizedComponent \n      properties:  \n        exposed_ports:  ['8080'] \n        ports:  ['8081:8080', '80:8080'] \n        volumes:  /tmp/docker:/tmp \n        image_name:  snow-skyline-alignment \n      requirements:  \n        - host:  snow-docker-host \n\n    security-rules-snow:  \n      type: sodalite.nodes.OpenStack.SecurityRules \n      properties:  \n        group_description:  Snow UC security group \n        ports:  \n          http_port:  \n            remote_ip_prefix: 0.0.0.0/0 \n            port_range_min: 80 \n            protocol: tcp \n            port_range_max: 80 \n          component_ports:  \n            remote_ip_prefix: 0.0.0.0/0 \n            port_range_min: 8080 \n            protocol: tcp \n            port_range_max: 8081 \n        group_name:  snow \n\n\n"
  },
  "ansible_definition": {
    "name": "playbooks",
    "type": "dir",
    "content": [
      {
        "name": "openstack",
        "type": "dir",
        "content": [
          {
            "name": "security-rule",
            "type": "dir",
            "content": [
              {
                "name": "delete.yml",
                "type": "file",
                "content": ""
              },
              {
                "name": "create.yml",
                "type": "file",
                "content": "---\n- hosts: all\n  gather_facts: no\n\n  tasks:\n    - name: Create security group\n      os_security_group:  \n        name: \"{{ group_name }}\"\n        state: present\n        description: \"{{ group_description }}\"\n\n    - name: Add security rules \n      os_security_group_rule:\n        security_group: \"{{ group_name }}\"\n        protocol: \"{{ item.value.protocol }}\"\n        port_range_min: \"{{ item.value.port_range_min }}\"\n        port_range_max: \"{{ item.value.port_range_max }}\"\n        remote_ip_prefix: \"{{ item.value.remote_ip_prefix }}\"\n      loop: \"{{ ports | dict2items }}\"\n\n"
              }
            ]
          },
          {
            "name": "vm",
            "type": "dir",
            "content": [
              {
                "name": "delete.yml",
                "type": "file",
                "content": "---\n- hosts: all\n  gather_facts: no\n\n  tasks:\n    - name: Delete VM\n      os_server:\n        state: absent\n        name: \"{{ id }}\""
              },
              {
                "name": "create.yml",
                "type": "file",
                "content": "---\n- hosts: all\n  gather_facts: no\n\n  tasks:\n\n    - name: Create VM\n      os_server:\n        state: present\n        name: \"{{ vm_name }}\"\n        image: \"{{ image }}\"\n        key_name: \"{{ key_name }}\"\n        flavor: \"{{ flavor }}\"\n        network: \"{{ network }}\"\n        security_groups: \"{{ security_groups }}\"\n      register: server_info\n\n    - name: Set attributes\n      set_stats:\n        data:\n          private_address:  \"{{ server_info.server.private_v4 }}\"\n          public_address:   \"{{ server_info.server.public_v4 }}\"\n          id:               \"{{ server_info.server.id }}\"\n\n\n    - name: Create temporary invetory for ssh wait\n      add_host:\n        name: server\n        groups: vms\n        ansible_host: \"{{ server_info.server.public_v4 }}\"\n        ansible_user: centos\n        ansible_ssh_common_args: >\n          -o IdentitiesOnly=yes\n          -o BatchMode=yes\n          -o UserKnownHostsFile=/dev/null\n          -o StrictHostKeyChecking=no\n\n- hosts: vms\n  gather_facts: no\n  tasks:\n    - name: Wait for ssh to wake up\n      wait_for_connection:\n"
              }
            ]
          }
        ]
      },
      {
        "name": "docker",
        "type": "dir",
        "content": [
          {
            "name": "dockerized_component_deploy.yml",
            "type": "file",
            "content": "- hosts: all\n  become_user: root\n  become: yes\n\n  tasks:\n    - set_fact:\n        auto_remove: \"{% if  restart_policy == 'always' %} no {% else %} yes {% endif %}\"\n\n    - name: Create docker container and connect to network\n      docker_container:\n        name: \"{{ alias }}\"\n        image: \"{{ registry_ip }}/{{ image_name }}\"\n        auto_remove: \"{{ auto_remove }}\"\n        command: \"{{ command }}\"\n        env: \"{{ env }}\"\n        restart_policy: \"{{ restart_policy }}\"\n        pull: \"{{ pull }}\"\n        ports: \"{{ ports }}\"\n        exposed_ports: \"{{ exposed_ports }}\"\n        volumes: \"{{ volumes }}\" \n\n\n"
          },
          {
            "name": "dockerized_component_undeploy.yml",
            "type": "file",
            "content": "---\n- hosts: all\n  become_user: root\n  become: yes\n\n  tasks:\n    - name: Delete docker containers\n      docker_container:\n        name: \"{{ alias }}\"\n        force_kill: true\n        keep_volumes: false\n        state: absent\n\n"
          },
          {
            "name": "create_docker_host.yml",
            "type": "file",
            "content": "---\n- hosts: all\n  become_user: root\n  become: yes\n  \n  vars:\n    pip_install_packages:\n      - name: docker\n      - name: cryptography\n\n  tasks:\n    - name: Set attributes\n      set_stats:\n        data:\n          registry_ip:  \"{{ registry_ip }}\"\n          ansible_ip:   \"{{ ansible_default_ipv4.address }}\"\n\n    - name: Create certs and storage folders\n      block:\n        - file:\n            path: \"/home/xopera/drive\"\n            state: directory\n        - file:\n            path: \"/home/xopera/certs\"\n            state: directory\n\n    - name: Copy root CA files\n      block:\n        - copy:\n            src: /home/xopera/certs/ca.crt\n            dest: \"/home/xopera/certs/ca.crt\"\n        - copy:\n            src: /home/xopera/certs/ca.key\n            dest: \"/home/xopera/certs/ca.key\"\n\n    - name: Install root CA\n      block:\n        - command: \"cp /home/xopera/certs/ca.crt /etc/pki/ca-trust/source/anchors/ca.crt\"\n        - command: update-ca-trust\n\n    - name: Generate certificates and clean up\n      block:\n        - openssl_privatekey:\n            path: \"/home/xopera/certs/image.docker.local.key\"\n            size: 4096\n        - openssl_csr:\n            path: \"/home/xopera/certs/image.docker.local.csr\"\n            privatekey_path: \"/home/xopera/certs/image.docker.local.key\"\n            country_name: SI\n            organization_name: XLAB\n            email_address: dragan.radolovic@xlab.si\n            common_name: \"image.docker.local\"\n            subject_alt_name: \"IP:{{ public_ipv4_address }}\"\n        - openssl_certificate:\n            path: \"/home/xopera/certs/image.docker.local.crt\"\n            csr_path: \"/home/xopera/certs/image.docker.local.csr\"\n            ownca_path: \"/home/xopera/certs/ca.crt\"\n            ownca_privatekey_path: \"/home/xopera/certs/ca.key\"\n            provider: ownca\n        - file:\n            state: absent\n            path: \"/home/xopera/certs/image.docker.local.csr\"\n\n    - name: Install certificates for communication with the registry\n      block:\n        - file:\n            path: \"/etc/docker/certs.d/{{ registry_ip }}\"\n            state: directory\n        - command: \"cp /home/xopera/certs/ca.crt /etc/docker/certs.d/{{ registry_ip }}\"\n        - command: \"cp /home/xopera/certs/image.docker.local.key /etc/docker/certs.d/{{ registry_ip }}\"\n        - command: \"cp /home/xopera/certs/image.docker.local.crt /etc/docker/certs.d/{{ registry_ip }}/image.docker.local.cert\"\n\n    - name: Configure the docker mtu for OpenStack and restart docker host\n      block:\n        - lineinfile:\n            path: /etc/docker/daemon.json\n            line: \"{\\\"mtu\\\": 1450}\"\n            create: yes\n        - service:\n            name: docker\n            state: restarted\n\n  roles:\n    - geerlingguy.repo-epel\n    - geerlingguy.pip\n    - geerlingguy.docker\n"
          },
          {
            "name": "destroy_docker_host.yml",
            "type": "file",
            "content": "---\n- hosts: all\n  become_user: root\n  become: yes\n  vars:\n    pip_install_packages:\n      - name: docker\n        state: absent\n\n  tasks:\n    - name: Delete the path to registry communication keys\n      file:\n          path: \"/etc/docker/certs.d/{{ registry_ip }}\"\n          state: absent\n\n  roles:\n    - geerlingguy.pip\n"
          }
        ]
      }
    ]
  },
  "config_script": {
    "name": "no_config",
    "type": "file",
    "content": ""
  },
  "timestamp": "2020-02-11T16:22:34.152227"
}
